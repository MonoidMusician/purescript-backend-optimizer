== Snapshot.KnownConstructors06 ================================================
================================================================================

++ Snapshot.KnownConstructors06.showTest Step 1 (Original) +++++++++++++++++++++
  { "show":
      Data.Show.Generic.genericShow
        Snapshot.KnownConstructors06.genericTest
        ( Data.Show.Generic.genericShowSum
          ( Snapshot.KnownConstructors06.genericShowConstructor
            { "reflectSymbol": \_ -> "Foo" }
          )
          ( Data.Show.Generic.genericShowSum
            ( Snapshot.KnownConstructors06.genericShowConstructor
              { "reflectSymbol": \_ -> "Bar" }
            )
            ( Data.Show.Generic.genericShowSum
              ( Snapshot.KnownConstructors06.genericShowConstructor
                { "reflectSymbol": \_ -> "Baz" }
              )
              ( Snapshot.KnownConstructors06.genericShowConstructor
                { "reflectSymbol": \_ -> "Qux" }
              )
            )
          )
        )
  }

-- Snapshot.KnownConstructors06.showTest Step 2 --------------------------------
  { "show":
      {- Inline -}
      let @0 = { "reflectSymbol": \_ -> "Foo" } in
      let
        @1 =
          {- UnpackRecord -}
          let
            @1 =
              { "genericShow'":
                  \v@1 ->
                    {- Inline -}
                    let ctor@2 = @0."reflectSymbol" (Type.Proxy.Proxy()) in
                    {- Inline -}
                    let v1@3 = [] in
                    ctor@2
              } in
          {- Inline -}
          let
            @2 =
              \dictGenericShow1@2 ->
                { "genericShow'":
                    \v@3 ->
                      if #[prim.istag Data.Generic.Rep.Inl](v@3) then
                        @1."genericShow'" v@3#0
                      else if #[prim.istag Data.Generic.Rep.Inr](v@3) then
                        dictGenericShow1@2."genericShow'" v@3#0
                      else 
                        #[prim.fail]()
                } in
          @2
            ( {- Inline -}
            let @3 = { "reflectSymbol": \_ -> "Bar" } in
            {- UnpackRecord -}
            let
              @4 =
                { "genericShow'":
                    \v@4 ->
                      {- Inline -}
                      let ctor@5 = @3."reflectSymbol" (Type.Proxy.Proxy()) in
                      {- Inline -}
                      let v1@6 = [] in
                      ctor@5
                } in
            {- Inline -}
            let
              @5 =
                \dictGenericShow1@5 ->
                  { "genericShow'":
                      \v@6 ->
                        if #[prim.istag Data.Generic.Rep.Inl](v@6) then
                          @4."genericShow'" v@6#0
                        else if #[prim.istag Data.Generic.Rep.Inr](v@6) then
                          dictGenericShow1@5."genericShow'" v@6#0
                        else 
                          #[prim.fail]()
                  } in
            @5
              ( {- Inline -}
              let @6 = { "reflectSymbol": \_ -> "Baz" } in
              {- UnpackRecord -}
              let
                @7 =
                  { "genericShow'":
                      \v@7 ->
                        {- Inline -}
                        let ctor@8 = @6."reflectSymbol" (Type.Proxy.Proxy()) in
                        {- Inline -}
                        let v1@9 = [] in
                        ctor@8
                  } in
              {- Inline -}
              let
                @8 =
                  \dictGenericShow1@8 ->
                    { "genericShow'":
                        \v@9 ->
                          if #[prim.istag Data.Generic.Rep.Inl](v@9) then
                            @7."genericShow'" v@9#0
                          else if #[prim.istag Data.Generic.Rep.Inr](v@9) then
                            dictGenericShow1@8."genericShow'" v@9#0
                          else 
                            #[prim.fail]()
                    } in
              @8
                ( {- Inline -}
                let @9 = { "reflectSymbol": \_ -> "Qux" } in
                {- Inline -}
                let
                  @10 =
                    { "genericShow'":
                        \v@10 ->
                          {- Inline -}
                          let
                            ctor@11 = @9."reflectSymbol" (Type.Proxy.Proxy()) in
                          {- Inline -}
                          let v1@12 = [] in
                          ctor@11
                    } in
                @10
                )
              )
            ) in
      \x@2 ->
        @1."genericShow'"
          ( if #[prim.istag Snapshot.KnownConstructors06.Foo](x@2) then
            Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
          else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@2) then
            Data.Generic.Rep.Inr
              (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
          else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
              )
          else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
              )
          else 
            #[prim.fail]()
          )
  }

-- Snapshot.KnownConstructors06.showTest Step 3 --------------------------------
  { "show":
      {- Inline -}
      let
        @0 =
          \v@0 ->
            {- Inline -}
            let @1 = Type.Proxy.Proxy() in
            "Foo" in
      let
        @1 =
          {- Inline -}
          let
            @1 =
              \v@1 ->
                {- Inline -}
                let @2 = Type.Proxy.Proxy() in
                "Bar" in
          let
            @2 =
              {- Inline -}
              let
                @2 =
                  \v@2 ->
                    {- Inline -}
                    let @3 = Type.Proxy.Proxy() in
                    "Baz" in
              let
                @3 =
                  {- Inline -}
                  let
                    @3 =
                      { "genericShow'":
                          \v@3 ->
                            {- Inline -}
                            let @4 = Type.Proxy.Proxy() in
                            "Qux"
                      } in
                  { "genericShow'":
                      \v@4 ->
                        if #[prim.istag Data.Generic.Rep.Inl](v@4) then
                          @2 v@4#0
                        else if #[prim.istag Data.Generic.Rep.Inr](v@4) then
                          @3."genericShow'" v@4#0
                        else 
                          #[prim.fail]()
                  } in
              { "genericShow'":
                  \v@4 ->
                    if #[prim.istag Data.Generic.Rep.Inl](v@4) then
                      @1 v@4#0
                    else if #[prim.istag Data.Generic.Rep.Inr](v@4) then
                      @3."genericShow'" v@4#0
                    else 
                      #[prim.fail]()
              } in
          { "genericShow'":
              \v@3 ->
                if #[prim.istag Data.Generic.Rep.Inl](v@3) then
                  @0 v@3#0
                else if #[prim.istag Data.Generic.Rep.Inr](v@3) then
                  @2."genericShow'" v@3#0
                else 
                  #[prim.fail]()
          } in
      \x@2 ->
        @1."genericShow'"
          ( if #[prim.istag Snapshot.KnownConstructors06.Foo](x@2) then
            Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
          else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@2) then
            Data.Generic.Rep.Inr
              (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
          else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
              )
          else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
              )
          else 
            #[prim.fail]()
          )
  }

-- Snapshot.KnownConstructors06.showTest Step 4 --------------------------------
  { "show":
      {- UnpackRecord -}
      let
        @0 =
          { "genericShow'":
              \v@0 ->
                if #[prim.istag Data.Generic.Rep.Inl](v@0) then
                  {- Inline -}
                  let @1 = v@0#0 in
                  "Baz"
                else if #[prim.istag Data.Generic.Rep.Inr](v@0) then
                  {- Inline -}
                  let @1 = v@0#0 in
                  "Qux"
                else 
                  #[prim.fail]()
          } in
      let
        @1 =
          {- UnpackRecord -}
          let
            @1 =
              { "genericShow'":
                  \v@1 ->
                    if #[prim.istag Data.Generic.Rep.Inl](v@1) then
                      {- Inline -}
                      let @2 = v@1#0 in
                      "Bar"
                    else if #[prim.istag Data.Generic.Rep.Inr](v@1) then
                      @0."genericShow'" v@1#0
                    else 
                      #[prim.fail]()
              } in
          { "genericShow'":
              \v@2 ->
                if #[prim.istag Data.Generic.Rep.Inl](v@2) then
                  {- Inline -}
                  let @3 = v@2#0 in
                  "Foo"
                else if #[prim.istag Data.Generic.Rep.Inr](v@2) then
                  @1."genericShow'" v@2#0
                else 
                  #[prim.fail]()
          } in
      \x@2 ->
        @1."genericShow'"
          ( if #[prim.istag Snapshot.KnownConstructors06.Foo](x@2) then
            Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
          else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@2) then
            Data.Generic.Rep.Inr
              (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
          else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
              )
          else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@2) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
              )
          else 
            #[prim.fail]()
          )
  }

-- Snapshot.KnownConstructors06.showTest Step 5 --------------------------------
  { "show":
      {- Inline -}
      let
        @0 =
          \v@0 ->
            if #[prim.istag Data.Generic.Rep.Inl](v@0) then
              "Baz"
            else if #[prim.istag Data.Generic.Rep.Inr](v@0) then
              "Qux"
            else 
              #[prim.fail]() in
      {- Inline -}
      let
        @1 =
          \v@1 ->
            if #[prim.istag Data.Generic.Rep.Inl](v@1) then
              "Bar"
            else if #[prim.istag Data.Generic.Rep.Inr](v@1) then
              @0 v@1#0
            else 
              #[prim.fail]() in
      {- UnpackRecord -}
      let
        @2 =
          { "genericShow'":
              \v@2 ->
                if #[prim.istag Data.Generic.Rep.Inl](v@2) then
                  "Foo"
                else if #[prim.istag Data.Generic.Rep.Inr](v@2) then
                  @1 v@2#0
                else 
                  #[prim.fail]()
          } in
      \x@3 ->
        @2."genericShow'"
          ( if #[prim.istag Snapshot.KnownConstructors06.Foo](x@3) then
            Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
          else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@3) then
            Data.Generic.Rep.Inr
              (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
          else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@3) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
              )
          else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@3) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
              )
          else 
            #[prim.fail]()
          )
  }

-- Snapshot.KnownConstructors06.showTest Step 6 --------------------------------
  { "show":
      {- Inline -}
      let
        @0 =
          \v@0 ->
            if #[prim.istag Data.Generic.Rep.Inl](v@0) then
              "Foo"
            else if #[prim.istag Data.Generic.Rep.Inr](v@0) then
              {- Inline -}
              let @1 = v@0#0 in
              if #[prim.istag Data.Generic.Rep.Inl](@1) then
                "Bar"
              else if #[prim.istag Data.Generic.Rep.Inr](@1) then
                {- Inline -}
                let @2 = @1#0 in
                if #[prim.istag Data.Generic.Rep.Inl](@2) then
                  "Baz"
                else if #[prim.istag Data.Generic.Rep.Inr](@2) then
                  "Qux"
                else 
                  #[prim.fail]()
              else 
                #[prim.fail]()
            else 
              #[prim.fail]() in
      \x@1 ->
        @0
          ( if #[prim.istag Snapshot.KnownConstructors06.Foo](x@1) then
            Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
          else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@1) then
            Data.Generic.Rep.Inr
              (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
          else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@1) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
              )
          else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@1) then
            Data.Generic.Rep.Inr
              ( Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
              )
          else 
            #[prim.fail]()
          )
  }

-- Snapshot.KnownConstructors06.showTest Step 7 --------------------------------
  { "show":
      \x@0 ->
        {- DistLet -}
        let
          @1 =
            if #[prim.istag Snapshot.KnownConstructors06.Foo](x@0) then
              Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments())
            else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@0) then
              Data.Generic.Rep.Inr
                (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
            else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@0) then
              Data.Generic.Rep.Inr
                ( Data.Generic.Rep.Inr
                  (Data.Generic.Rep.Inl(Data.Generic.Rep.NoArguments()))
                )
            else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@0) then
              Data.Generic.Rep.Inr
                ( Data.Generic.Rep.Inr
                  (Data.Generic.Rep.Inr(Data.Generic.Rep.NoArguments()))
                )
            else 
              #[prim.fail]() in
        if #[prim.istag Data.Generic.Rep.Inl](@1) then
          "Foo"
        else if #[prim.istag Data.Generic.Rep.Inr](@1) then
          if #[prim.istag Data.Generic.Rep.Inl](@1#0) then
            "Bar"
          else if #[prim.istag Data.Generic.Rep.Inr](@1#0) then
            if #[prim.istag Data.Generic.Rep.Inl](@1#0#0) then
              "Baz"
            else if #[prim.istag Data.Generic.Rep.Inr](@1#0#0) then
              "Qux"
            else 
              #[prim.fail]()
          else 
            #[prim.fail]()
        else 
          #[prim.fail]()
  }

-- Snapshot.KnownConstructors06.showTest Step 8 (Final) ------------------------
  { "show":
      \x@0 ->
        if #[prim.istag Snapshot.KnownConstructors06.Foo](x@0) then
          "Foo"
        else if #[prim.istag Snapshot.KnownConstructors06.Bar](x@0) then
          "Bar"
        else if #[prim.istag Snapshot.KnownConstructors06.Baz](x@0) then
          "Baz"
        else if #[prim.istag Snapshot.KnownConstructors06.Qux](x@0) then
          "Qux"
        else 
          #[prim.fail]()
  }